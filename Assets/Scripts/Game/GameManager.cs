
using System;
using System.Collections;
using System.Threading.Tasks;
using UnityEngine;

public class GameManager : MonoSingleton<GameManager>
{
    private Coroutine battleRoutine;
    private float currentEnemyHP;
    [SerializeField] public HeroHandler heroHandlers;

    void Start()
    {
        NetworkManager.Start();
        NetworkManager.SendRequest_Test("StartGame", "");
    }
    public async Task StartGame(string json)
    {
        GameMyData.Instance.LoadGameInfoJson(json);

        await UIManager.Instance.LoadDataUI();

        await Task.Delay(1000);     // 1Ï¥à Ï†ïÎèÑ ÌõÑÏóê 
        await LoadGame();
    }

    public async Task LoadGame()
    {
        await heroHandlers.LoadHeroEnemy();
        NetworkManager.SendRequest_Test("GetServerTime", "");       // ÌòÑÏû¨ ÏÑúÎ≤Ñ ÏãúÍ∞Ñ Í∞ÄÏ†∏Ïò§Í≥†
        NetworkManager.SendRequest_Test("GetLastClaimTime", "");    // Ïû¨Ï†ëÏÜç Ï†Ñ ÎßàÏßÄÎßâ ÏãúÍ∞Ñ Í∞ÄÏ†∏Ïò§Í≥† + Î≥¥ÏÉÅ

        await Task.Delay(500);

        StartSimulation();
    }




    //////////// simulation

    public void StartSimulation()
    {
        if (battleRoutine != null)
            StopCoroutine(battleRoutine);

        currentEnemyHP = GameMyData.Instance.UserData.enemy.GetHP();
        battleRoutine = StartCoroutine(BattleLoop());
    }

    private IEnumerator BattleLoop()
    {
        var currentEnemy = GameMyData.Instance.UserData.enemy;
        int attackCount = 0;
        float elapsedTime = 0f;

        while (currentEnemyHP > 0)
        {
            float attackInterval = 1f / SimulationCalc.GetAttackSpeed();
            yield return new WaitForSeconds(attackInterval);

            elapsedTime += attackInterval;
            attackCount++;

            var stat = GameMyData.Instance.UserData.statLevelsByIndex;
            var table = DataManager.Instance.myCharacterTable;

            // Í≥µÍ≤©Î†• Í≥ÑÏÇ∞
            int levelAtk = stat[(int)STATUS_UI.Stat.AttackPower];
            float baseAtk = table.DefaultAttackPower;
            float calcAtk = baseAtk * Mathf.Log(levelAtk + 1) * table.ConstantAttack;

            // ÌÅ¨Î¶¨Ìã∞Ïª¨
            int levelCritChance = stat[(int)STATUS_UI.Stat.CriticalChance];
            int levelCritDamage = stat[(int)STATUS_UI.Stat.CriticalDamage];

            float critChance = Mathf.Min(100f, table.DefaultCriticalChance + levelCritChance);
            float critMultiplier = table.DefaultCriticalDamage + levelCritDamage * 0.5f;

            // Î∞©Ïñ¥Î†•
            float defense = currentEnemy.GetDefense();

            // ÏµúÏ¢Ö Îç∞ÎØ∏ÏßÄ
            bool isCrit;
            float damageBeforeDef = calcAtk;
            float damageAfterDef = damageBeforeDef * (1f / (1f + defense / 100f));
            isCrit = UnityEngine.Random.value < (critChance / 100f);
            float finalDamage = isCrit ? damageAfterDef * critMultiplier : damageAfterDef;

            float beforeHP = currentEnemyHP;
            currentEnemyHP -= finalDamage;

            // Ï∂úÎ†•
            Debug.Log(
    $@"[Í≥µÍ≤© {attackCount}ÌöåÏ∞®] ‚è±Ô∏è ÏãúÍ∞Ñ: {elapsedTime:F2}Ï¥à
	‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Ï∫êÎ¶≠ÌÑ∞ ÏÉÅÌÉú ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
	‚îÇ Î†àÎ≤®:           {GameMyData.Instance.UserData.statLevelsByIndex[(int)STATUS_UI.Stat.Level]}
	‚îÇ Í≥µÍ≤©Î†•:         Í∏∞Î≥∏ {baseAtk:F2} ‚Üí Í≥ÑÏÇ∞ {calcAtk:F2} ‚Üí Î∞©Ïñ¥ ÌõÑ {damageAfterDef:F2}
	‚îÇ Í≥µÍ≤©ÏÜçÎèÑ:       {SimulationCalc.GetAttackSpeed():F2} Ìöå/Ï¥à
	‚îÇ ÌÅ¨Î¶¨Ìã∞Ïª¨ ÌôïÎ•†:   {critChance:F2}%
	‚îÇ ÌÅ¨Î¶¨Ìã∞Ïª¨ Îç∞ÎØ∏ÏßÄ: {critMultiplier:F2}Î∞∞
	‚îÇ Î≥¥Ïú† Ïû¨Ìôî:       {GameMyData.Instance.Coin:F2}
	‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
	‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Ï†Å ÏÉÅÌÉú ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
	‚îÇ Î†àÎ≤®:    {currentEnemy.Level}
	‚îÇ Ï≤¥Î†•:    {beforeHP:F2} ‚Üí {Mathf.Max(0, currentEnemyHP):F2}
	‚îÇ Î∞©Ïñ¥Î†•:  {defense:F2}
	‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

	üí• ÏûÖÌûå Îç∞ÎØ∏ÏßÄ: {finalDamage:F2} {(isCrit ? "(ÌÅ¨Î¶¨Ìã∞Ïª¨ Í≥µÍ≤©!)" : "(ÏùºÎ∞ò Í≥µÍ≤©)")}\n"
            );

            if (currentEnemyHP <= 0)
            {
                Debug.Log("[Simulation] Ï†Å Ï≤òÏπò ÏôÑÎ£å!");
                StopSimulation();
                yield break;
            }
        }
    }

    public void StopSimulation()
    {
        if (battleRoutine != null)
        {
            StopCoroutine(battleRoutine);
            battleRoutine = null;
            Debug.Log("[Simulation] ÏãúÎÆ¨Î†àÏù¥ÏÖò Ï§ëÎã®Îê®.");
        }
    }

}
